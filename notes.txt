# Pipeline prerequistes 
## Create the key vault resource group and the key vault

az group create -n dev-pipeline-dependencies-rg -l westus
az keyvault create -n dev-pipeline-secrets-kv -g dev-pipeline-dependencies-rg -l westus

Make a note of the key vault resource id which will be in the format “/subscriptions/XXXXXXXX-XX86–47XX-X8Xf-XXXXXXXXXX/resourceGroups/dev-pipeline-dependencies-rg/providers/Microsoft.KeyVault/vaults/dev-pipeline-secrets-kv

# Create storage account and container where terraform will store the state file for the environment

az group create -n dev-terraform-backend-rg -l westus
# Create storage account
az storage account create --resource-group dev-terraform-backend-rg --name devterraformbackenddemo --sku Standard_LRS --encryption-services blob
# Get storage account key
ACCOUNT_KEY=$(az storage account keys list --resource-group dev-terraform-backend-rg --account-name devterraformbackenddemo --query [0].value -o tsv)
ZmQoRer6bmDL3zCYaw/tXGMW2HhRVxOam5Pt/O+UQjrt2yjePDlM7nlgqKKJ2VZah0NdqxcCpkH8ON2VjmGlCw==
# Create blob container
az storage container create --name terraform-backend-files --account-name devterraformbackenddemo --account-key $ACCOUNT_KEY

# storage account id 
/subscriptions/cf31015f-3cdf-45e4-96dd-706bebcf84a2/resourceGroups/dev-terraform-backend-rg/providers/Microsoft.Storage/storageAccounts/devterraformbackenddemo

# Add the storage account key as a secret in the key vault. This will be read in the AzDO pipeline.
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "tf-backend-sa-access-key" --value "$ACCOUNT_KEY"

# Create a resource group where terraform will provision the resources
az group create -n dev-terraform-rg -l westus

# Create terraform service principal with required access and add corresponding secrets to key vault
# Create terraform service principal
TF_SP=$(az ad sp create-for-rbac -n dev-tf-sp --role contributor --scopes "/subscriptions/XXXXXXXX-XX86-47XX-X8Xf-XXXXXXXXXX/resourceGroups/dev-terraform-backend-rg/providers/Microsoft.Storage/storageAccounts/devterraformbackenddemo" "/subscriptions/XXXXXXXX-XX86-47XX-X8Xf-XXXXXXXXXX/resourceGroups/dev-provisioning-rg"  )
# Client ID of the service principal
TF_CLIENT_ID=$(echo $TF_SP | jq '.appId' | sed 's/"//g')# Client secret of the service principal
TF_CLIENT_SECRET=$(echo $TF_SP | jq '.password' | sed 's/"//g')# Set your tenant ID
TF_TENANT_ID="your-tenant-id"# Set your subscription ID
TF_SUBSCRIPTION="your-subcription-id"# Add the values as secrets to key vault
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "tf-sp-id" --value "$TF_CLIENT_ID"
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "tf-sp-secret" --value "$TF_CLIENT_SECRET"
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "tf-tenant-id" --value "$TF_TENANT_ID"
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "tf-subscription-id" --value "$TF_SUBSCRIPTION"

{ "appId": "ab8ec7d3-e9e5-4f46-86dc-75d47c0e75e0", 
"displayName": "dev-tf-sp", "name": "http://dev-tf-sp", 
"password": "3kZYmZE0.~DtqNf5Ok8hI0kCsabc6EpLoE", 
"tenant": "c160a942-c869-429f-8a96-f8c8296d57db" }

CLIENT_ID=$(az ad sp show --id http://dev-tf-sp --query appId --output tsv)



## Create AKS service principal and add corresponding secrets to key vault
AKS_SP=$(az ad sp create-for-rbac -n dev-aks-sp --skip-assignment)
AKS_CLIENT_ID=$(echo $AKS_SP | jq '.appId' | sed 's/"//g')
AKS_CLIENT_SECRET=$(echo $AKS_SP | jq '.password' | sed 's/"//g')

$AKS_CLIENT_ID
59148afc-6101-4fd7-b1c7-1a6683dc5ae9
$AKS_CLIENT_SECRET
0-QRuyql9ythDWi~v1REHa5Zp5zyv~m6O.

az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "aks-sp-id" --value "$AKS_CLIENT_ID"
az keyvault secret set --vault-name dev-pipeline-secrets-kv --name "aks-sp-secret" --value "$AKS_CLIENT_SECRET"

# Create a SP for AzDO with access to key vault secrets.
AzDO_SP=$(az ad sp create-for-rbac -n dev-azdo-sp --skip-assignment)AzDO_CLIENT_ID=$(echo $AzDO_SP | jq '.appId' | sed 's/"//g')AzDO_CLIENT_SECRET=$(echo $AzDO_SP | jq '.password' | sed 's/"//g')DEV_SUBSCRIPTION_ID="your-subscription"DEV_SUBSCRIPTION_NAME="your-subscription-name"TENANT_ID="your-tenant-id"

## give the ADO SP access to get pipeline secrets
az role assignment create --assignee $AzDO_CLIENT_ID --scope "/subscriptions/XXXXXXXX-XX86-47XX-X8Xf-XXXXXXXXXX/resourceGroups/dev-pipeline-dependencies-rg/providers/Microsoft.KeyVault/vaults/dev-pipeline-secrets-kv" --role "reader"az keyvault set-policy --name dev-pipeline-secrets-kv --spn $AzDO_CLIENT_ID --subscription $DEV_SUBSCRIPTION_ID --secret-permissions get

az storage blob lease break -b <blob-name> -c terraform-backend-files \
    --account-name devterraformbackenddemo --account-key ZmQoRer6bmDL3zCYaw/tXGMW2HhRVxOam5Pt/O+UQjrt2yjePDlM7nlgqKKJ2VZah0NdqxcCpkH8ON2VjmGlCw==
	
az storage blob lease break -b dev.tfstate -c terraform-backend-files --account-name devterraformbackenddemo --account-key ZmQoRer6bmDL3zCYaw/tXGMW2HhRVxOam5Pt/O+UQjrt2yjePDlM7nlgqKKJ2VZah0NdqxcCpkH8ON2VjmGlCw==


    resource_group_name  = "dev-terraform-backend-rg"
    storage_account_name = "devterraformbackenddemo"
    container_name       = "terraform-backend-files"
    access_key = "ZmQoRer6bmDL3zCYaw/tXGMW2HhRVxOam5Pt/O+UQjrt2yjePDlM7nlgqKKJ2VZah0NdqxcCpkH8ON2VjmGlCw=="
	
https://medium.com/microsoftazure/creating-a-single-secure-azure-devops-yaml-pipeline-to-provision-multiple-environments-using-620900aae18
https://github.com/maniSbindra/multienv-multistage-terraform-yaml-pipeline/blob/master/azure-pipelines-multi-environment.yml
https://medium.com/@andrew.kaczynski/gitops-in-kubernetes-argo-cd-and-gitlab-ci-cd-5828c8eb34d6
https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops&tabs=yaml
https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auth-kubernetes
https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/aks-template?view=azure-devops
https://kubernetes.io/blog/2019/07/23/get-started-with-kubernetes-using-python/



az login --service-principal -u 59148afc-6101-4fd7-b1c7-1a6683dc5ae9 -p '0-QRuyql9ythDWi~v1REHa5Zp5zyv~m6O.' --tenant c160a942-c869-429f-8a96-f8c8296d57db
az account set --subscription cf31015f-3cdf-45e4-96dd-706bebcf84a2
az aks get-credentials --resource-group dev-terraform-rg --name dev-aks-cluster-aks --admin


AKS_SP_ID=59148afc-6101-4fd7-b1c7-1a6683dc5ae9
AKS_SP_SECRET=0-QRuyql9ythDWi~v1REHa5Zp5zyv~m6O.
CLIENT_ID=ab8ec7d3-e9e5-4f46-86dc-75d47c0e75e0
CLIENT_SECRET=3kZYmZE0.~DtqNf5Ok8hI0kCsabc6EpLoE
TENANT_ID=c160a942-c869-429f-8a96-f8c8296d57db
SUBSCRIPTION_ID=cf31015f-3cdf-45e4-96dd-706bebcf84a2
environment=dev

az ad sp show --id http://59148afc-6101-4fd7-b1c7-1a6683dc5ae9
az acr create --resource-group app-demo --name acrpydemo --sku Basic

eyJhdXRocyI6eyJhY3JweWRlbW8uYXp1cmVjci5pbyI6eyJ1c2VybmFtZSI6IjU5MTQ4YWZjLTYxMDEtNGZkNy1iMWM3LTFhNjY4M2RjNWFlOSIsInBhc3N3b3JkIjoiMC1RUnV5cWw5eXRoRFdpfnYxUkVIYTVacDV6eXZ+bTZPLiIsImF1dGgiOiJOVGt4TkRoaFptTXROakV3TVMwMFptUTNMV0l4WXpjdE1XRTJOamd6WkdNMVlXVTVPakF0VVZKMWVYRnNPWGwwYUVSWGFYNTJNVkpGU0dFMVduQTFlbmwyZm0wMlR5ND0ifX19
luciano@Azure:~$ IP=$(kubectl get svc hello-python-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

kubectl get svc hello-python-service -o jsonpath='{.spec.ports.ingress[0].ip}'
kubectl get svc hello-python-service -o jsonpath='{.spec.ports[0].port}'
soanrcloud
be4f21431cb9a2fa22f36519f8fb182276b13f10

CLUSTER_NAME=dev-aks-cluster
RG=dev-terraform-rg
SERVICE_PRINCIPAL_NAME=akssp
AKS_REGISTRY_ID=$(az aks show --name $CLUSTER_NAME --resource-group $RG --query id --output tsv)
SP_PASSWD=$(az ad sp create-for-rbac --name $SERVICE_PRINCIPAL_NAME --role Contributor --scopes $AKS_REGISTRY_ID --query password --output tsv)
CLIENT_ID=$(az ad sp show --id http://$SERVICE_PRINCIPAL_NAME --query appId --output tsv)
echo "Service principal ID: $CLIENT_ID"
echo "Service principal password: $SP_PASSWD" 

ACR_NAME=acrpydemo.azurecr.io
SERVICE_PRINCIPAL_NAME=dev-aks-sp
ACR_REGISTRY_ID=$(az acr show --name $ACR_NAME --query id --output tsv)
az role assignment create --assignee $AKS_SP_ID --scope $ACR_REGISTRY_ID --role acrpull
SECRET_NAME=acrsecret
AKS_SP_ID=59148afc-6101-4fd7-b1c7-1a6683dc5ae9
AKS_SP_SECRET=0-QRuyql9ythDWi~v1REHa5Zp5zyv~m6O.

kubectl create secret docker-registry $SECRET_NAME --docker-server=$ACR_NAME --docker-username=$AKS_SP_ID --docker-password=$AKS_SP_SECRET

docker login acrpydemo.azurecr.io -u $AKS_SP_ID -p $AKS_SP_SECRET
